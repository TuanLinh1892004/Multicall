{
  "language": "Solidity",
  "sources": {
    "contracts/evm/MockStep.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8;\r\n\r\ncontract Step {\r\n    mapping(uint256 => uint256) public step;\r\n\r\n    function addStep(uint256 id, uint256 amount) public {\r\n        step[id] += amount;\r\n    }\r\n\r\n    function removeStep(uint256 id, uint256 amount) public {\r\n        step[id] -= amount; // careful for underflow\r\n    }\r\n}"
    },
    "contracts/evm/Multicall.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8;\r\n\r\ncontract Multicall {\r\n    struct Call {\r\n        address receiver;\r\n        uint256 value;\r\n        bytes data;\r\n    }\r\n\r\n    function multicall(Call[] memory calls) external payable {\r\n        for (uint256 i = 0; i < calls.length; i++) {\r\n            bool success;\r\n            if (calls[i].value > 0) {\r\n                (success,) = calls[i].receiver.call{value: calls[i].value}(calls[i].data);\r\n            } else {\r\n                (success,) = calls[i].receiver.call(calls[i].data);\r\n            }\r\n            \r\n            require(success, \"Multicall failed\");\r\n        }\r\n        if (address(this).balance > 0) {\r\n            (bool ok,) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n            require(ok, \"transfer \");\r\n        }\r\n    }\r\n\r\n    fallback() external payable {}\r\n    receive() external payable {}\r\n}"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 0
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}